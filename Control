clc;clear all;
%% GUI
%Modo=false -> control por posicion
%Modo=true -> control por velocidad

%Control=false -> control por PID
%Control=true -> control por Espacio de estados

%Pelota = false -> Pelota de PIN-PON
%Pelota = true -> Pelota acero

%REF = en metros, posición que el controlador va a intentar alcanzar

%Ruido=true -> señal para indicar que la camara tenga ruido blanco de
%distribucion normal
Nombre="LQRAceroGolpe2";


Modo=false;
Control=true;
Pelota=true;
REF=0;
Ruido=false;
%Varianza=varianza de la distribucion normal;
Varianza=sqrt(500); %Extremo LQR=1000 ExtremoPID=500; 

%Cuadrada= señal cuadrada de valor REF de periodo de valor Cuadrada;
%Cuadrada=<0 no hace señal cuadrada
Cuadrada=0;


%% Declaro los parametros de una de las bolas
Ts=0.05; %tiempo de muestreo
if Pelota==false
    %% Parametros bola naranja
    m=0.02;
    R=0.04;
    r=0.039;
    Je=2/5*m*((R^5-r^5)/R^3-r^3);
    g=9.81;
    l=0.4;
    Jb=(1/12)*1*1^2; %0.09
    n=1/16; %relacion de transmision
    Q_Pos = [10 0;0 0.1];%[10 0;0 0.1]; %Q_Pos = [500 0;0 0.1]; %[25 0;0 0.1]; % funciona con ruido de 1% %[50 0;0 0.1]; %funciona sin ruido y con ruido de distribucion normal
    R_Pos = [0.1];%R=0.1
    Q_Vel=[10 0 0; 0 0.1 0; 0 0 1]; %El mejor de las simulaciones
    R_Vel=[0.1];
else
    %% Parametros bola de acero
    m=0.26;
    R=0.04;
    r=0.04;
    Je=0.4*m*R^2;
    g=9.81;
    l=0.4;
    Jb=(1/12)*1*1^2; %0.09
    n=1/16; %relacion de transmision
    Q_Pos = [10 0;0 0.1]; %[10 0;0 1]; %ruido blanco de la camara -> [1 0;0 1]
    R_Pos = [0.1]; %[0.7] -> %ruido blanco de la camara -> [1]
    Q_Vel = [1 0 0; 0 1 0; 0 0 0.1];
    R_Vel = [1]; 
end
%% calculo el valor de K
if Modo==false
    %% Modelo A (posicion)
    %modelo continuo
    sys_ini=ss([0 1; 0 0],[0; n*(-m*g)/(m+Je/R^2)],[1 0],[0]);
    %modelo discreto
    sysd = c2d(sys_ini,Ts);
    A=sysd.A;
    B=sysd.B;
    C=sysd.C;
    D=sysd.D;
    %calculo de K del sistema discreto
    K = dlqr(A,B,Q_Pos,R_Pos);
    %K=[K(1),K(2)/3];
else
    %% Modelo B (velocidad)
    %modelo incluyendo el torque del motor
    sys_ini=ss([0 1 0 ;n*0 n*0 -n*m*g/(m+Je/R^2);0 0 0],[0;0;1],[1 0 0],[0]);    
    %modelo discreto
    sysd = c2d(sys_ini,Ts);  
    A=sysd.A;
    B=sysd.B;
    C=sysd.C;
    D=sysd.D;
    %calculo de K del modelo discreto
    K = lqr(sysd,Q_Vel,R_Vel);

end

%% inicializo la camara
Resolution=1280;
%establezco el objeto cam como la webcam conectada por usb
cam=webcam(1);
cam.Resolution="1280x720";
%tomo una captura de la camara
imagen=snapshot(cam);
%mido el tamaño del frame de la camara
framesize=size(cam);
%llamo wb a una barra de espera la cual me va a servir para poder salir del
%bucle while
wb = waitbar(0,'-','Name','Espera..','CreateCancelBtn','delete(gcbf)');
%% inicializo algunas variables
% Inicio en 2 para las condiciones de i-1 tipo velocidad de la bola etc.
i=2;
%Establecer un flag para establecer el centro al inicio del bucle
flag=0;
% Centro de la pelota
Centro=0;
%incio en 0 segundos
t(1)=0;

%% inicializo el puerto serie

com='COM4';
%elimino lo que este en el puerto serie
delete(instrfind({'Port'},{com}));
%Inicializo el puerto serial que utilizaré
puerto_serial=serialport(com, 1000000);
%Baud rate en 1000000 al igual que el arduino para una correcta comunicacion 
%aviso de error en la conexion
warning('off','MATLAB:serial:fscanf:unsuccessfulRead');
%Abro el puerto serial
fopen(puerto_serial);
%establezco el tiempo maximo de espera del puerto serie
puerto_serial.Timeout=0.005;
%espero a que se establezca la conexión
pause(1);

dato=0;
aux=0;
AnguloMot(1)=0;
giroAnt=0;
posicionAnt=0;
Ponderada=0;
med=1;
j=1;
tj(1)=0;
PosMedia(1)=0;
%cont=1;

ErrorPrev=0.0;
SumError=0.0;
Taux=0;

filter = [0,0,0,0,0];
filterIndex = 0;
filterLen = 3;


%%  inicio bucle de control
tic;
while 1
    %% bucle de camara
    t(i)=toc;
    if Pelota==false
        %% Pelota de PinPon
%tomo una captura de pantalla    
    img0=snapshot(cam);
%Recorto la imagen para que tarde menos en procesarla
    %img0 = img0(180:280, 1:640, 1:3); %Camara de 320x640px
    %img0 = img0(300:350, 1:640, 1:3);
    img0=img0(475:575, 1:1280, 1:3);
%convierte los valores de rojo, verde y azul de una imagen RGB en valores de luminancia (Y) y crominancia (I y Q) de una imagen NTSC.
    YIQ=rgb2ntsc(img0);
%cojo el valor de cromancia ya que los positivos es el naranja
    img=imsubtract(YIQ(:,:,2),0);
    % ---------------Filtros------------
%Filtro la imagen gris utilizando un filtro de wiener
%utilizando metodos estadisticos filtra el ruido de la imagen de 20x20
%alrededor de cada pixel sacando el valor medio
    I=wiener2(img,[10,10]);
    bw=imbinarize(I,0.15);%0.2 es mucho pero creo que 0.25 es poco
%cada pixel de salida tiene como valor la media del 3x3 de alrededor
%del aimagen binarizada    
    bw=medfilt2(bw);
%Realiza una erosion de las imagenes blancas seguido de una dilatación con
%forma de disco de valor 1
    bw=imopen(bw,strel('disk',1)); %el valor de 1 creo que es pequeño, deberia aumentarlo
    
%elimina las areas cuyos pixeles conjuntos sean menores a 1000
    bw=bwareaopen(bw,150);

%Rellena de 1 todos aquellos 0 encerrados por 1
    bw=imfill(bw,'holes');

%devuelve la matriz L con diferenciacion entre los distintos objetos N
%la matriz L es una matriz de tamaño de la imagen binarizada pero con
%enteros siendo: de valor 0 el fonde, de valor 1 el objeto 1, de valor 2
%el objeto 2...
    else
        %% Pelota de acero
            img0=snapshot(cam);
   img1=img0(475:575, 1:1280, 1:3);
Gr=rgb2gray(img1);
%cojo el valor de cromancia ya que los positivos es el naranja
   %img=imsubtract(YIQ(:,:,2),0);
    % ---------------Filtros------------

%Filtro la imagen gris utilizando un filtro de wiener
%utilizando metodos estadisticos filtra el ruido de la imagen de 20x20
%alrededor de cada pixel sacando el valor medio
    bw=wiener2(Gr,[10,10]);
    bw=imbinarize(bw,0.3);%0.2 es mucho pero creo que 0.25 es poco
    bw=~bw;
%cada pixel de salida tiene como valor la media del 3x3 de alrededor
%del aimagen binarizada    
    bw=medfilt2(bw);

%Realiza una erosion de las imagenes blancas seguido de una dilatación con
%forma de disco de valor 1
    bw=imopen(bw,strel('disk',1)); %el valor de 1 creo que es pequeño, deberia aumentarlo
    
%elimina las areas cuyos pixeles conjuntos sean menores a 1000
    bw=bwareaopen(bw,1000);

%Rellena de 1 todos aquellos 0 encerrados por 1
    bw=imfill(bw,'holes');
    end

    [L,N]=bwlabel(bw);


    %-----------------regionprops------------------
            % [B,L] = bwboundaries(I,'noholes');
 % mide diferentes propiedades, segun tu le digas, de la matriz de
 % etiquetas   
     prop=regionprops(L, 'Area', 'Centroid', 'Circularity');
    %----------------------------------------------
%muestra la matriz binarizada y con los filtros correspondientes
% figure(1)
  %  imshow(bw);


%realiza un bucle donde comprueba que el objeto correspondiente
  %mostrado es aproximadamente un circulo y muestra su centroide en la
  %pantalla de 640x400   
t1(i)=toc;
    for n=1:N
%% Detecto bola e incio en control
% obtener centroide
        c=round(prop(n).Centroid); 

%obtener cuanto se aproxima a un circulo        
        Circulo=round(prop(n).Circularity);
     % if Control==true   
     %    PosMedia(med)=c(1);
     %    med=med+1;
     %    if t(i)>2
     %        flagCam=1;
     %    else
     %        med=1;
     %    end
     % else
     %     med=4;
     %     flagCam=1;
     % end
         if Circulo>0.80 % && med==5  && flagCam==1
%% inicializo valores del bucle una vez detectada la bola
j=j+1;
tj(j)=toc;
% med=1;
% Ponderada=mean(PosMedia);

% Si detecta un circulo es la esfera, por tanto entra en el bucle de control
% resolucion (640px)

%incializo el vector de 32 bytes a escribir por el puerto serie
comvec = uint8(1:32);
cs1=uint32(0);
cs2=uint32(0);
%byte de verificacion
comvec(1) = 0xFF;
% Tipos de control en el arduino

%Posicion del centro
if flag==0
      Centro=c(1);
      flag=1;
      auxcentro(j-1)=Centro;
      
end
auxcentro(j)=c(1);
% if Control==true
% med=1;
% Ponderada=mean(PosMedia);
% Pos=Ponderada-Centro; 
% Ponderada=0;
% else
Pos=c(1)-Centro;
% end
%% Posicion y velocidad de la bola

%%----------------------ruido blanco camara--------------
if Ruido==true
    %ruidoBlancoCamara(i)=4*(rand-0.5); % varianza de 16->sqrt(16)=4 ->5%
    ruidoBlancoCamara(j)=(randn)*(Varianza); %distribuicion normal estandarizada, varianza de valor 1 y media 0
    Pos=Pos+ruidoBlancoCamara(j);
    posicion(1)=Pos*(l/(Resolution/2)); %para evitar que se vaya en la primera iteración
end
%--------------------------------------------------------
posicion(j)=-Pos*(l/(Resolution/2));
posicionR(j) = posicion(j);

if filterIndex == -1
    filterIndex = 0;
    filter(1) = posicionR(j);
    filter(2) = posicionR(j);
    filter(3) = posicionR(j);
    filter(4) = posicionR(j);
    filter(5) = posicionR(j);
end

filter(5) = filter(4);
filter(4) = filter(3);
filter(3) = filter(2);
filter(2) = filter(1);
filter(1) = posicionR(j);
%%% filterIndex = filterIndex + 1
posicion(j) = filter(1)*0.4+filter(2)*0.25+filter(3)*0.15+filter(4)*0.1+filter(5)*0.1;




velocidad(j)=(posicion(j)-posicion(j-1))/((tj(j)-tj(j-1)));
%% _________________LAZO DE CONTROL________________________

if Cuadrada>0 && t(i)>Taux+Cuadrada
    Taux=t(i);
    REF=-REF;
end

if Control==true
    %% Espacio de estados
    if Modo==false
        %% Poscion
        comvec(2)= 'P';
        EstadoAct=[posicion(j);velocidad(j)];
        error(j)=(K(1)*REF-K*EstadoAct);
        giro=error(j)*(4000/(2*pi)); %Con S3 activo
        %giro=error(i)*(800/(2*pi)); %Si no tengo pins activos
        %giro=error(i)*200;

        if giro>5000
            giro=5000;
        elseif giro<-5000
            giro=-5000;
        end
        
        %giro=giro*(8000/(2*pi));
        pasos(j)=giro;
    else
        %% Velocidad
        comvec(2)= 'V';
        if length(tj)-1>(length(AnguloMot))
            AnguloMot(j-1)=AnguloMot(length(AnguloMot));
        end
            Ang=(AnguloMot(j-1)*2*pi)/4000;
            EstadoAct=[posicion(j);velocidad(j);Ang];
            error(j)=(K(1)*REF-K*EstadoAct);
            % Pasos por segundo:
            % giro=error(i)*800/(2*pi); 
            giro=error(j)*4000/(2*pi);             
            
            % por ser velocidad relativa
            giroAux=giro;
            giro=giro-giroAnt;

            if giro>10000
                giro=10000;
            elseif giro<-10000
                giro=-10000;    
            end
            giroAnt=giroAux;
            pasosMot(j)=giro;
        
    end
else
%% PID
    if Modo==false
        comvec(2)= 'P';
        Kp=10000;
        Ki=0;
        Kd=200000;
    else
        comvec(2)= 'V';
        Kp=0;
        Ki=0;
        Kd=0;
    end
    error(j)=-(REF-posicion(j));
    ErrorPrev=error(j)-error(j-1);  
    SumError=SumError+error(j);
    
    control=error(j)*Kp+ErrorPrev*Kd+SumError*Ki;
    if control>5000
       control=5000;
    elseif control<-5000
       control=-5000;
    end
    pasos(j)=control;
    giro = control;
end
%% ----------------------Comunicacion Serial----------------------        

        position = int32(giro);
        comvec(3)= uint8(bitshift(bitand(position,int32(0x000000FF)),   0));
        comvec(4)= uint8(bitshift(bitand(position,int32(0x0000FF00)),  -8));
        comvec(5)= uint8(bitshift(bitand(position,int32(0x00FF0000)), -16));
        comvec(6)= uint8(bitshift(bitand(position,int32(0xFF000000)), -24));
        %werid 255 1111 1111 -> 127 0111 1111
        if(position<0 && comvec(6) == 127)
            comvec(6) = 255;
        end

        % Calculate cs
        cs1=uint32(0);
        cs2=uint32(0);
        for x = 1:31
                cs1 = cs1 + uint32(comvec(x));
        end
        cs1 = uint8(bitand(cs1,uint32(0xFF)));
        comvec(32)= cs1;
        % write to serial port
           T1(i)=toc;
           write(puerto_serial,comvec,"uint8");
           T2(i)=toc;
           Read=char(read(puerto_serial, 32, "uint8"));
           T3(i)=toc;
           %Compruebo si he leido del puerto serie 
           if isempty(Read)
               aux=aux+1;
               if Modo==true
                   % VelocidadMot(i)=giro;
                   % AnguloMot(i)=AnguloMot(i-1)+VelocidadMot(i)*(t(i)-t(i-1));
               end
           else
               Readaux=Read;
               %Compruebo bit de inicio
               if Read(1)==0xFF
                   cs2=uint32(0);
                   for x = 1:30
                        cs2 = cs2 + uint32(Read(x));
                   end
                   cs2 = uint8(bitand(cs2,uint32(0xFF)));
                   %Compruebo el byte de suma (ultimo byte)
                   if Read(32)==cs2
                       %Cojo solo el numero que me devuelve
                       Read=Read(6:11);
                       %Cambio del char a entero
                       
                       AnguloMot(j)=int32(str2double(Read));
                       if Modo==true
                        VelocidadMot(j)=(AnguloMot(j)-AnguloMot(j-1))/(tj(j)-tj(j-1));
                       end
                       %Print=Pos
                   else
                       Print="Error Sum"
                   end
               else
                   Print="Error sync"
               end
               T4(i)=toc;
               %Vacio buffer de lectura
               Read=[];
           end
%------------------------------------------------------
        end
    end

 %cuadro para poder candelar el bucle while 1
 % if(t(i)>7)
 %     break
 % end

%____________________________________________________    
%% una vez finalizado el bucel grafico 
   if ~ishandle(wb)
        break
   else
    end
%_____________________________________________________
%numero de iteraciones
%1/(t(i)-t(i-1))
    i=i+1;
end

 if length(tj)>length(posicion)
        posicion(j)=0;
 end
      if length(tj)>length(AnguloMot)
        AnguloMot(j)=0;
      end
if Modo==false
      if length(tj)>length(pasos)
        pasos(j)=0;
        error(i)=0;
      end
      
else
    if length(tj)>length(pasosMot)
        pasos(j)=0;
    end
    if length(tj)>length(VelocidadMot)
        VelocidadMot(j)=0;
    end
end


      if length(tj)>length(velocidad)
        velocidad(i)=0;
      end
      

    if Ruido==1   
    figure(1);
    plot(tj(:),posicion(:),'g', 'DisplayName',"Posición con Filtro");
    xlabel('Tiempo (s)');
    ylabel('Posición esfera (m)');
    title("Posición de la esfera respecto al tiempo. Varianza= " + string((Varianza*Varianza)));
    hold on
    plot(tj(:),posicionR(:),'r', 'DisplayName',"Posición sin Filtro");
    else
        figure(1);
        plot(tj(:),posicion(:),'g', 'DisplayName',"Posición real con filtro");
        xlabel('Tiempo (s)');
        ylabel('Posición esfera (m)');
        title("Posición de la esfera respecto al tiempo");
        hold on
        plot(tj(:),posicionR(:),'r', 'DisplayName',"Posición real sin filtro");
    end

    figure(2); 
    plot(tj(:),velocidad(:),'g', 'DisplayName',"Velocidad real");
    xlabel('Tiempo (s)');
    ylabel('Velocidad esfera (m/s)');
    title("Velocidad de la esfera respecto al tiempo");

if Modo==false
    figure(3);  
    % yyaxis left
    plot(tj(:),AnguloMot(:),'g','DisplayName',"Pasos reales");
    hold on 
    plot(tj(:),pasos(:),'r','DisplayName',"Pasos ideales");
    % yyaxis right
    % plot(t(:),error(:),'g','DisplayName',"Control");
    xlabel('Tiempo (s)');
    ylabel('Posición del Motor (pasos)');
    title("Diferencia entre numero de pasos");
else
    figure(3);  
    plot(tj(:),VelocidadMot(:),'g','DisplayName',"Pasos reales");
    hold on 
    plot(tj(:),pasosMot(:),'r','DisplayName',"Pasos Ideales");
   
    xlabel('Tiempo (s)');
    ylabel('Posición Motor');
    title("Diferencia entre velocidad ideal y real");
end
    

if Ruido==1
       if length(t)>length(ruidoBlancoCamara)
        ruidoBlancoCamara(j)=0;
       end
    figure(4);  
    plot(tj(:),ruidoBlancoCamara(:),'g','DisplayName',"Varianza="+string((Varianza*Varianza)));
    xlabel('Tiempo (s)');
    ylabel('Amplitud');
    title("Ruido blanco de la Camara");
end

      if length(tj)>length(error)
        error(i)=0;
      end

ISE(1)=0;
ITSE(1)=0;
IAE(1)=0;
ITAE(1)=0;
for x=2:length(error)
    ISE(x)=ISE(x-1)+Ts*(error(x)^2+error(x-1)^2)/2;
    ITSE(x)=ITSE(x-1)+t(x-1)*Ts*(error(x)^2+error(x-1)^2)/2;
    IAE(x)=IAE(x-1)+abs(Ts*(error(x)+error(x-1))/2);
    ITAE(x)=ITAE(x-1)+abs(t(x-1)*Ts*(error(x)+error(x-1))/2);
end
% figure(5);
% plot(t(:),control(:),'r','DisplayName',"error");
% title("Error de posicion");
figure(6)
hold on
plot(tj(:),ISE(:),'r','DisplayName',"Error al cuadrado");
plot(tj(:),ITSE(:),'b','DisplayName',"Error al cuadrado  por tiempo");
% figure(4)
% hold on
plot(tj(:),IAE(:),'g','DisplayName',"Valor absoluto del error al cuadrado");
plot(tj(:),ITAE(:),'y','DisplayName',"Valor absoluto del error al cuadrado por tiempo");
plot(tj(:),error(:),'k','DisplayName',"Valor del Error");

xlabel('Tiempo (s)');
ylabel('Integrales del Error');
title("Indices de desempeño");



writematrix(posicion, 'Graficas\'+ Nombre + '_posicion1.txt')
writematrix(posicionR, 'Graficas\'+ Nombre + '_posicionR1.txt')

writematrix(velocidad, 'Graficas\'+ Nombre + '_velocidad1.txt')

writematrix(AnguloMot, 'Graficas\'+ Nombre + '_angmot1.txt')
writematrix(pasos, 'Graficas\'+ Nombre + '_pasos1.txt')

writematrix(ISE, 'Graficas\'+ Nombre + '_ISE.txt')
writematrix(ITSE, 'Graficas\'+ Nombre + '_ITSE.txt')
writematrix(IAE, 'Graficas\'+ Nombre + '_IAE.txt')
writematrix(ITAE, 'Graficas\'+ Nombre + '_ITAE.txt')
writematrix(error, 'Graficas\'+ Nombre + '_error.txt')

writematrix(tj, 'Graficas\'+ Nombre + '_tiempo1.txt')
writematrix(t, 'Graficas\'+ Nombre + '_tiempoTot.txt')
%% limpio puertos
clear puerto_serial;
clear cam;
